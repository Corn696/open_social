<?php

/**
 * @file
 * Installation file for Social Tagging.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\search_api\Item\Field;

/**
 * Install the module.
 */
function social_tagging_install() {
  _social_tagging_assign_default_permissions();

  // Update field definitions.
  _social_tagging_field_definitions_update();

  // Add the new search api fields.
  _social_tagging_add_fields_search_api();

  // If the search module is enabled trigger updating of the indexes affected
  // by tagging.
  try {
    if (\Drupal::moduleHandler()->moduleExists('social_search')) {
      social_search_resave_search_indexes(['social_content', 'social_groups']);
    }
  }
  catch (EntityStorageException $e) {
    \Drupal::logger('social_tagging')->info($e->getMessage());
  }
}

/**
 * Uninstall the module.
 */
function social_tagging_uninstall() {
  // Remove the search api fields.
  _social_tagging_remove_fields_search_api();

  // Update field definitions.
  _social_tagging_field_definitions_update();

  try {
    if (\Drupal::moduleHandler()->moduleExists('social_search')) {
      social_search_resave_search_indexes(['social_content', 'social_groups']);
    }
  }
  catch (EntityStorageException $e) {
    \Drupal::logger('social_tagging')->info($e->getMessage());
  }
}

/**
 * Assign the default permissions for this module.
 */
function _social_tagging_assign_default_permissions() {
  $permissions = [
    'administer social_tagging',
    'delete terms in social_tagging',
    'edit terms in social_tagging',
  ];

  // SM should be able to change the permissions.
  user_role_grant_permissions('sitemanager', $permissions);
}

/**
 * Add fields to search API.
 */
function _social_tagging_search_api_fields() {
  return [
    'social_content' => 'node',
    'social_groups' => 'group',
    'social_users' => 'profile',
  ];
}

/**
 * Add fields to search API.
 */
function _social_tagging_add_fields_search_api() {
  $fields = _social_tagging_search_api_fields();

  foreach ($fields as $index => $type) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');

    /** @var \Drupal\search_api\IndexInterface $index */
    $index = $index_storage->load($index);

    $field_intro = new Field($index, 'social_tagging');
    $field_intro->setType('integer');
    $field_intro->setPropertyPath('social_tagging');
    $field_intro->setDatasourceId('entity:' . $type);
    $field_intro->setLabel('Social Tagging');
    $index->addField($field_intro);

    $index->save();
  }
}

/**
 * Remove fields from search API.
 */
function _social_tagging_remove_fields_search_api() {
  $fields = _social_tagging_search_api_fields();

  foreach ($fields as $index => $type) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');

    /** @var \Drupal\search_api\IndexInterface $index */
    $index = $index_storage->load($index);

    $index->removeField('social_tagging');
    $index->save();
  }
}

/**
 * Exclude landing pages from tagging.
 */
function social_tagging_update_8001() {
  // Set allow to true, since that's the case by default.
  $config = \Drupal::getContainer()->get('config.factory')->getEditable('social_tagging.settings');
  $config->set('tag_node_type_landing_page', FALSE)->save();
}

/**
 * Toggle group index.
 */
function social_tagging_update_8002() {
  // Update field definitions.
  _social_tagging_field_definitions_update();
  // Toggle the index groups.
  try {
    // If the search module is enabled we need to update the group index.
    if (\Drupal::moduleHandler()->moduleExists('social_search')) {
      social_search_resave_search_indexes(['social_groups']);
    }
  }
  catch (EntityStorageException $e) {
    \Drupal::logger('social_tagging')->info($e->getMessage());
  }
}

/**
 * Update the field definitions on install, or in an update hook.
 */
function _social_tagging_field_definitions_update() {
  // Create field storage for the 'Highlight' base field.
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  \Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Install Tagging base field to profile entity type.
 */
function social_tagging_update_8003() {
  $field_storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Tagging'))
    ->setDescription(t('Tagging field.'))
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'social_tagging' => 'social_tagging',
      ],
    ])
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'type' => 'hidden',
    ])
    ->setDisplayOptions('form', [
      'type' => 'options_select',
      'weight' => 3,
      'settings' => [],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('social_tagging', 'profile', 'social_tagging', $field_storage_definition);
}

/**
 * Toggle user index.
 */
function social_tagging_update_8004() {
  // Update field definitions.
  _social_tagging_field_definitions_update();
  // Toggle the index users.
  try {
    // If the search module is enabled we need to update the group index.
    if (\Drupal::moduleHandler()->moduleExists('social_search')) {
      social_search_resave_search_indexes(['social_users']);
    }
  }
  catch (EntityStorageException $e) {
    \Drupal::logger('social_tagging')->info($e->getMessage());
  }
}

/**
 * Add the search api fields.
 */
function social_tagging_update_8005() {
  _social_tagging_add_fields_search_api();

  // Update field definitions.
  _social_tagging_field_definitions_update();
  // Toggle the index users.
  try {
    // If the search module is enabled we need to update the group index.
    if (\Drupal::moduleHandler()->moduleExists('social_search')) {
      social_search_resave_search_indexes(['social_users']);
    }
  }
  catch (EntityStorageException $e) {
    \Drupal::logger('social_tagging')->info($e->getMessage());
  }
}
